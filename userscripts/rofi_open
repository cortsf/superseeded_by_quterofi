#!/usr/bin/env bash
die() {
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

begins_with_short_option() {
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

_arg_string=
_arg_newtab="off"

print_help() {
	printf '%s\n' "Custom search menu for qutebrowser"
	printf 'Usage: %s [--string <arg>] [--(no-)newtab] [-h|--help]\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--string)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_string="$2"
				shift
				;;
			--string=*)
				_arg_string="${_key##--string=}"
				;;
			--no-newtab|--newtab)
				_arg_newtab="on"
				test "${1:0:5}" = "--no-" && _arg_newtab="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

[[ "$_arg_newtab" == "on" ]] && command="open -t" || command="open"

call_rofi () {
    rofi \
	-dmenu \
	-kb-accept-entry "Ctrl+j,Ctrl+m,Return,KP_Enter" \
	-kb-cancel "Escape,Control+g,Control+bracketleft" \
	-kb-custom-1 "Alt+j,Alt+m" \
	-kb-custom-2 "Ctrl+o" \
	-kb-custom-3 "Alt+o" \
	-kb-custom-4 "Alt+u" \
	-window-title "$command" \
	-font "Inconsolata 16"\
	-filter "$1" \
	-theme-str "window { anchor: north; location: north; width: 100%; font-size: 20px; border: 0px; children: [ horibox ]; } horibox { orientation: horizontal; children: [ prompt, textbox-prompt-colon, entry, listview ];} listview { border: 0px 0px 2px 0px; layout: horizontal; spacing:5px; lines: 10; width: 0px; }"
}


string="$(call_rofi "$_arg_string")"

ret="$?"

while true; do
    [[ "$it" -lt "6" ]] && it=$((it+1)) || { echo "message-info 'Breaking at: $it'" >> "$QUTE_FIFO"; break; } # use to prevent infinite loops when rofi fails to start (dev/debug only)
    [[ "$ret" == "0" ]] && {
	alias="$(echo "$string" | sed 's/ *$//' | awk 'NF>1{print $NF}')"
	if [[ $alias == gh.* || $alias == ghi.* ]]; 
	then { section="github_repos"; search_alias="${alias#gh*.}"; }
	else { section="engines"; search_alias="$alias"; } 
	fi
	if sed -n "/^\[\[$section\]\]/,/^$/p" "$QUTE_CONFIG_DIR/engines.toml" | grep -q "^alias *= *\"$search_alias\""; 
	then echo "$command $alias $(echo "$string" | sed 's/ *$//' | sed 's/\ [^\ ]*$//')" >> "$QUTE_FIFO";
	else echo "$command $string" >> "$QUTE_FIFO"; 
	fi
	break; 
    }
    [[ "$ret" == "1" ]] && exit 0;
    [[ "$ret" == "10" ]] && { echo "$command $string" >> "$QUTE_FIFO"; break; }
    [[ "$ret" == "11" && "$command" == "open" ]] && { command="open -t"; string="$(call_rofi "$string")"; ret="$?"; }
    [[ "$ret" == "11" && "$command" == "open -t" ]] && { command="open"; string="$(call_rofi "$string")"; ret="$?"; }
    [[ "$ret" == "12" ]] && { string="$(call_rofi "$QUTE_URL")"; ret="$?"; }
    [[ "$ret" == "13" ]] && { echo "cmd-set-text -s :$command $string" >> "$QUTE_FIFO" ; break ; }
done
